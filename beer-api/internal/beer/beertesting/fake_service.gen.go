// Code generated by counterfeiter. DO NOT EDIT.
package beertesting

import (
	"context"
	"sync"

	"github.com/jkarlos000/technical-challenge/beer-api/internal/beer"
)

type FakeService struct {
	CountStub        func(context.Context) (int, error)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		arg1 context.Context
	}
	countReturns struct {
		result1 int
		result2 error
	}
	countReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CreateStub        func(context.Context, beer.CreateBeerRequest) (beer.BeerItem, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 beer.CreateBeerRequest
	}
	createReturns struct {
		result1 beer.BeerItem
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 beer.BeerItem
		result2 error
	}
	GetStub        func(context.Context, int) (beer.BeerItem, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	getReturns struct {
		result1 beer.BeerItem
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 beer.BeerItem
		result2 error
	}
	GetPriceStub        func(context.Context, int, string, uint32) (beer.BeerBox, error)
	getPriceMutex       sync.RWMutex
	getPriceArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 string
		arg4 uint32
	}
	getPriceReturns struct {
		result1 beer.BeerBox
		result2 error
	}
	getPriceReturnsOnCall map[int]struct {
		result1 beer.BeerBox
		result2 error
	}
	QueryStub        func(context.Context, int, int, map[string]interface{}) ([]beer.BeerItem, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 map[string]interface{}
	}
	queryReturns struct {
		result1 []beer.BeerItem
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 []beer.BeerItem
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) Count(arg1 context.Context) (int, error) {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CountStub
	fakeReturns := fake.countReturns
	fake.recordInvocation("Count", []interface{}{arg1})
	fake.countMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeService) CountCalls(stub func(context.Context) (int, error)) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeService) CountArgsForCall(i int) context.Context {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	argsForCall := fake.countArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeService) CountReturns(result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) CountReturnsOnCall(i int, result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Create(arg1 context.Context, arg2 beer.CreateBeerRequest) (beer.BeerItem, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 beer.CreateBeerRequest
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeService) CreateCalls(stub func(context.Context, beer.CreateBeerRequest) (beer.BeerItem, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeService) CreateArgsForCall(i int) (context.Context, beer.CreateBeerRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) CreateReturns(result1 beer.BeerItem, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) CreateReturnsOnCall(i int, result1 beer.BeerItem, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 beer.BeerItem
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Get(arg1 context.Context, arg2 int) (beer.BeerItem, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeService) GetCalls(stub func(context.Context, int) (beer.BeerItem, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeService) GetArgsForCall(i int) (context.Context, int) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) GetReturns(result1 beer.BeerItem, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) GetReturnsOnCall(i int, result1 beer.BeerItem, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 beer.BeerItem
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) GetPrice(arg1 context.Context, arg2 int, arg3 string, arg4 uint32) (beer.BeerBox, error) {
	fake.getPriceMutex.Lock()
	ret, specificReturn := fake.getPriceReturnsOnCall[len(fake.getPriceArgsForCall)]
	fake.getPriceArgsForCall = append(fake.getPriceArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 string
		arg4 uint32
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetPriceStub
	fakeReturns := fake.getPriceReturns
	fake.recordInvocation("GetPrice", []interface{}{arg1, arg2, arg3, arg4})
	fake.getPriceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) GetPriceCallCount() int {
	fake.getPriceMutex.RLock()
	defer fake.getPriceMutex.RUnlock()
	return len(fake.getPriceArgsForCall)
}

func (fake *FakeService) GetPriceCalls(stub func(context.Context, int, string, uint32) (beer.BeerBox, error)) {
	fake.getPriceMutex.Lock()
	defer fake.getPriceMutex.Unlock()
	fake.GetPriceStub = stub
}

func (fake *FakeService) GetPriceArgsForCall(i int) (context.Context, int, string, uint32) {
	fake.getPriceMutex.RLock()
	defer fake.getPriceMutex.RUnlock()
	argsForCall := fake.getPriceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeService) GetPriceReturns(result1 beer.BeerBox, result2 error) {
	fake.getPriceMutex.Lock()
	defer fake.getPriceMutex.Unlock()
	fake.GetPriceStub = nil
	fake.getPriceReturns = struct {
		result1 beer.BeerBox
		result2 error
	}{result1, result2}
}

func (fake *FakeService) GetPriceReturnsOnCall(i int, result1 beer.BeerBox, result2 error) {
	fake.getPriceMutex.Lock()
	defer fake.getPriceMutex.Unlock()
	fake.GetPriceStub = nil
	if fake.getPriceReturnsOnCall == nil {
		fake.getPriceReturnsOnCall = make(map[int]struct {
			result1 beer.BeerBox
			result2 error
		})
	}
	fake.getPriceReturnsOnCall[i] = struct {
		result1 beer.BeerBox
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Query(arg1 context.Context, arg2 int, arg3 int, arg4 map[string]interface{}) ([]beer.BeerItem, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 map[string]interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.QueryStub
	fakeReturns := fake.queryReturns
	fake.recordInvocation("Query", []interface{}{arg1, arg2, arg3, arg4})
	fake.queryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeService) QueryCalls(stub func(context.Context, int, int, map[string]interface{}) ([]beer.BeerItem, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeService) QueryArgsForCall(i int) (context.Context, int, int, map[string]interface{}) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeService) QueryReturns(result1 []beer.BeerItem, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 []beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) QueryReturnsOnCall(i int, result1 []beer.BeerItem, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 []beer.BeerItem
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 []beer.BeerItem
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getPriceMutex.RLock()
	defer fake.getPriceMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ beer.Service = new(FakeService)
