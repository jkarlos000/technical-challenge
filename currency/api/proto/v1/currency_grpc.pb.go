// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyClient is the client API for Currency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyClient interface {
	GetPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetPriceStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Currency_GetPriceStreamClient, error)
}

type currencyClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyClient(cc grpc.ClientConnInterface) CurrencyClient {
	return &currencyClient{cc}
}

func (c *currencyClient) GetPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/currency.v1.Currency/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) GetPriceStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Currency_GetPriceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[0], "/currency.v1.Currency/GetPriceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyGetPriceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_GetPriceStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type currencyGetPriceStreamClient struct {
	grpc.ClientStream
}

func (x *currencyGetPriceStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyServer is the server API for Currency service.
// All implementations must embed UnimplementedCurrencyServer
// for forward compatibility
type CurrencyServer interface {
	GetPrice(context.Context, *Request) (*Response, error)
	GetPriceStream(*Request, Currency_GetPriceStreamServer) error
	mustEmbedUnimplementedCurrencyServer()
}

// UnimplementedCurrencyServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyServer struct {
}

func (UnimplementedCurrencyServer) GetPrice(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedCurrencyServer) GetPriceStream(*Request, Currency_GetPriceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPriceStream not implemented")
}
func (UnimplementedCurrencyServer) mustEmbedUnimplementedCurrencyServer() {}

// UnsafeCurrencyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServer will
// result in compilation errors.
type UnsafeCurrencyServer interface {
	mustEmbedUnimplementedCurrencyServer()
}

func RegisterCurrencyServer(s grpc.ServiceRegistrar, srv CurrencyServer) {
	s.RegisterService(&Currency_ServiceDesc, srv)
}

func _Currency_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency.v1.Currency/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).GetPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_GetPriceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).GetPriceStream(m, &currencyGetPriceStreamServer{stream})
}

type Currency_GetPriceStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type currencyGetPriceStreamServer struct {
	grpc.ServerStream
}

func (x *currencyGetPriceStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Currency_ServiceDesc is the grpc.ServiceDesc for Currency service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Currency_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currency.v1.Currency",
	HandlerType: (*CurrencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _Currency_GetPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPriceStream",
			Handler:       _Currency_GetPriceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/currency.proto",
}
